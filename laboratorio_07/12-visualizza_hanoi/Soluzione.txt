import java.util.Scanner;

public class Soluzione {

    static int N;
    static int[][] disks;
    static int[] heights;

    public static void repeat(char c, int t) {
        while (t-- > 0) System.out.print(c);
    }

    public static void drawDisk(int s) {
        repeat(' ', N - s);
        repeat('*', s);
        System.out.print('|');
        repeat('*', s);
        repeat(' ', N - s);
    }

    public static void init(int N) {
        Soluzione.N = N;
        disks = new int[3][N];
        heights = new int[3];
        heights[0] = N;
        heights[1] = heights[2] = 0;
        for (int s = N; s > 0; s--) disks[0][N - s] = s;
    }

    public static void print() {
        for (int p = 0; p < 3; p++) {
            System.out.print(p + ": ");
            for (int h = heights[p] - 1; h >= 0; h--) System.out.print(disks[p][h] + " ");
            System.out.println();
        }
        System.out.println();
    }

    public static void draw() {
        for (int h = N - 1; h >= 0; h--) {
            System.out.print(' ');
            for (int p = 0; p < 3; p++)
                if (heights[p] <= h)
                    drawDisk(0);
                else
                    drawDisk(disks[p][h]);
            System.out.println(' ');
        }
        repeat('-', 6 * N + 5);
        System.out.println();
    }

    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        init(Integer.parseInt(args[0]));
        draw();
        while (s.hasNextLine()) {
            String[] move = s.nextLine().split(" ");
            int from = Integer.parseInt(move[0]);
            int to = Integer.parseInt(move[2]);

            heights[from]--;
            disks[to][heights[to]] = disks[from][heights[from]];
            heights[to]++;
            System.out.println();
            draw();
        }
    }

}
